Index: __main__.py
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>import cv2\r\nimport mediapipe as mp\r\nimport numpy as np\r\n\r\n\r\nmp_drawing = mp.solutions.drawing_utils\r\nmp_drawing_styles = mp.solutions.drawing_styles\r\nmp_pose = mp.solutions.pose\r\n\r\ndef check_action():\r\n    pass\r\n\r\n\r\n\r\n# For webcam input:\r\ndef main():\r\n    cap = cv2.VideoCapture(\"control_mechanism/test.mp4\")\r\n    with mp_pose.Pose(\r\n        static_image_mode = False,\r\n        min_detection_confidence=0.5,\r\n        min_tracking_confidence=0.5) as pose:\r\n      while cap.isOpened():\r\n        success, image = cap.read()\r\n        if not success:\r\n          print(\"Ignoring empty camera frame.\")\r\n          # If loading a video, use 'break' instead of 'continue'.\r\n          continue\r\n\r\n        # To improve performance, optionally mark the image as not writeable to\r\n        # pass by reference.\r\n        image.flags.writeable = False\r\n        image = cv2.cvtColor(image, cv2.COLOR_BGR2RGB)\r\n        results = pose.process(image)\r\n\r\n        # Draw the pose annotation on the image.\r\n        image.flags.writeable = True\r\n        image = cv2.cvtColor(image, cv2.COLOR_RGB2BGR)\r\n        mp_drawing.draw_landmarks(\r\n            image,\r\n            results.pose_landmarks,\r\n            mp_pose.POSE_CONNECTIONS,\r\n            landmark_drawing_spec=mp_drawing_styles.get_default_pose_landmarks_style())\r\n        # Flip the image horizontally for a selfie-view display.\r\n        cv2.imshow('MediaPipe Pose', cv2.flip(image, 1))\r\n        if cv2.waitKey(1) ==ord(\"q\"):\r\n          break\r\n    cap.release()\r\n\r\ncv2.destroyAllWindows()
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/__main__.py b/__main__.py
--- a/__main__.py	
+++ b/__main__.py	
@@ -32,6 +32,7 @@
         image = cv2.cvtColor(image, cv2.COLOR_BGR2RGB)
         results = pose.process(image)
 
+
         # Draw the pose annotation on the image.
         image.flags.writeable = True
         image = cv2.cvtColor(image, cv2.COLOR_RGB2BGR)
